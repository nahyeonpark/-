import java.util.*;

public class Main {
	static int n;
    static int[][] a;
    static boolean[][] visited;
    static int[][] dir = {{-1,0}, {1,0} , {0,-1}, {0,1}};

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        
        a = new int[n][n];
        visited = new boolean[n][n];
        
        int max = 0, g_max = -1;
        
        for(int i = 0; i < n; i++) {
        	for(int j = 0; j < n; j++) {
        		int k = scan.nextInt();
        		a[i][j] = k;
         		max = Math.max(max, k);
        	}
        }
        
        for(int h = 1; h <= max; h++) {
        	int g_num = 0;
        	for(int i = 0; i < n; i++) {
        		for(int j = 0; j < n; j++) {
        			if(visited[i][j] || a[i][j] < h) continue;
        			dfs(i,j,h);
        			g_num++;
        		}
        	}
        	for(int i = 0; i < n; i++)
        		Arrays.fill(visited[i], false);
        	g_max = Math.max(g_max, g_num);
        }

        System.out.println(g_max);
        	
    }
    
    static void dfs(int x, int y, int h) {
    	visited[x][y] = true;
    	
    	for(int i = 0; i < 4; i++) {
    		int nx = x + dir[i][0];
    		int ny = y + dir[i][1];
    		if(nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
    		if(a[nx][ny] < h) continue;
    		if(visited[nx][ny]) continue;
    		dfs(nx,ny,h);
    	}
    }

}
